#!/usr/bin/env php
<?php

declare(strict_types=1);

use PhpParser\PhpVersion;
use StrictPhp\Interpreter;
use PhpParser\ParserFactory;

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

['args' => $args, 'options' => $options] = parseArgs($argv);
$input = $args[0] ?? '';

$isDebug = isset($options['debug']);
$isDirectExecution = isset($options['r']);

if (! $isDirectExecution) {
    if (! file_exists($input)) {
        echo "File not found: {$input}", PHP_EOL;
        exit;
    }
    $lines = file($input);
} else {
    $lines = ['<?php', $input];
}

$phpVersion = '8.2';
$parser = (new ParserFactory())->createForVersion(PhpVersion::fromString($phpVersion));

try {
    $code = implode(PHP_EOL, $lines);

    (new Interpreter($parser, $isDebug))->run($code);
} catch (Exception $exception) {
    echo "Parse error: {$exception->getMessage()}", PHP_EOL;
} catch (Error $error) {
    echo "Fatal error: {$error->getMessage()}", PHP_EOL;
}

/**
 * @param array<string> $argv
 *
 * @return array{args: array<string>, options: array<string>}
 */
function parseArgs(array $argv): array
{
    $optionIndex = null;
    $options = getopt('r', ['debug'], $optionIndex);
    $args = array_slice($argv, (int)$optionIndex);

    return compact('args', 'options');
}
